#include<GL/gl.h>
#include<GL/glu.h>
#include<GL/glut.h>
#include<iostream>
#include<windows.h>
#include<stdio.h>
#define screen_height 480
#define MAX_VERTICES 100

using namespace std;

struct Point
{
    double x;
    double y;
};

int numVertices = 0;
Point vertices[MAX_VERTICES];

void mouseHandling(int button, int state, int x, int y)
{
    if(button == GLUT_LEFT_BUTTON && state == GLUT_DOWN)
    {
        if(numVertices < MAX_VERTICES)
        {
            vertices[numVertices].x = x;
            vertices[numVertices].y = screen_height - y;
            numVertices++;
            glutPostRedisplay();
        }
    }
}

void init()
{
    glClearColor(0, 0, 0, 0);
    glLoadIdentity();
    gluOrtho2D(0, 640, 0, 480);
}

void draw_pixel(int x, int y)
{
    glBegin(GL_POINTS);
    glColor3f (1.0, 1.0, 1.0);
    glVertex2i(x, y);
    glEnd();
}

void myDisplay()
{
    for(int i=0; i<numVertices; i++)
    {
        cout<<"x: "<<vertices[i].x<<"y: "<<vertices[i].y<<endl;
    }
    glFlush();
}

void bezier()
{
    double xNew, yNew;
    double x1 = vertices[0].x;
    double y11 = vertices[0].y;
    double x2 = vertices[1].x;
    double y2 = vertices[1].y;
    double x3 = vertices[2].x;
    double y3 = vertices[2].y;
    double x4 = vertices[3].x;
    double y4 = vertices[3].y;
    for(double i=0.01; i<1; i=i+0.01)
    {
        xNew = (1-i)*(1-i)*(1-i)*x1 + 3*(1-i)*(1-i)*i*x2 + 3*i*i*(1-i)*x3 + i*i*i*x4;
        yNew=(1-i)*(1-i)*(1-i)*y11 + 3*(1-i)*(1-i)*i*y2 + 3*i*i*(1-i)*y3 + i*i*i*y4;
        draw_pixel(xNew, yNew);
    }
}

void Key(unsigned char ch,int x,int y)
{
        if(ch=='c')
        {
            bezier();
            glutPostRedisplay();
            numVertices = 0;
        }
}

int main(int argc, char *argv[])
{
    glutInit(&argc, argv);
    glutInitWindowSize(640,480);
    glutInitWindowPosition(10,10);
    glutInitDisplayMode(GLUT_RGB | GLUT_SINGLE | GLUT_DEPTH);
    glutCreateWindow("Bezier");
    glutDisplayFunc(myDisplay);
    glutKeyboardFunc(Key);
    glutMouseFunc(mouseHandling);
    init();
    glutMainLoop();

    return EXIT_SUCCESS;
}
